-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hw_label_accel is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    src_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    src_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    dst_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    dst_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    src_TVALID : IN STD_LOGIC;
    src_TREADY : OUT STD_LOGIC;
    dst_TVALID : OUT STD_LOGIC;
    dst_TREADY : IN STD_LOGIC );
end;


architecture behav of hw_label_accel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hw_label_accel,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.341883,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=158,HLS_SYN_DSP=26,HLS_SYN_FF=6208,HLS_SYN_LUT=6590,HLS_VERSION=2018_3}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal rows : STD_LOGIC_VECTOR (31 downto 0);
    signal cols : STD_LOGIC_VECTOR (31 downto 0);
    signal base_data_V_i_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal base_data_V_t_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit354_pr_U0_ap_start : STD_LOGIC;
    signal Block_Mat_exit354_pr_U0_ap_done : STD_LOGIC;
    signal Block_Mat_exit354_pr_U0_ap_continue : STD_LOGIC;
    signal Block_Mat_exit354_pr_U0_ap_idle : STD_LOGIC;
    signal Block_Mat_exit354_pr_U0_ap_ready : STD_LOGIC;
    signal Block_Mat_exit354_pr_U0_rows_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit354_pr_U0_rows_out_write : STD_LOGIC;
    signal Block_Mat_exit354_pr_U0_cols_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit354_pr_U0_cols_out_write : STD_LOGIC;
    signal Block_Mat_exit354_pr_U0_ap_return_0 : STD_LOGIC_VECTOR (18 downto 0);
    signal Block_Mat_exit354_pr_U0_ap_return_1 : STD_LOGIC_VECTOR (17 downto 0);
    signal Block_Mat_exit354_pr_U0_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_tmp_9_cast344_loc_ch : STD_LOGIC;
    signal tmp_9_cast344_loc_ch_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_tmp_9_cast344_loc_ch : STD_LOGIC := '0';
    signal ap_sync_channel_write_tmp_9_cast344_loc_ch : STD_LOGIC;
    signal ap_channel_done_tmp_9_loc_channel : STD_LOGIC;
    signal tmp_9_loc_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_tmp_9_loc_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_tmp_9_loc_channel : STD_LOGIC;
    signal ap_channel_done_base_size_cast345_lo : STD_LOGIC;
    signal base_size_cast345_lo_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_base_size_cast345_lo : STD_LOGIC := '0';
    signal ap_sync_channel_write_base_size_cast345_lo : STD_LOGIC;
    signal Loop_1_proc_U0_ap_start : STD_LOGIC;
    signal Loop_1_proc_U0_ap_done : STD_LOGIC;
    signal Loop_1_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_1_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_1_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_1_proc_U0_src_TREADY : STD_LOGIC;
    signal Loop_1_proc_U0_base_data_V_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal Loop_1_proc_U0_base_data_V_ce0 : STD_LOGIC;
    signal Loop_1_proc_U0_base_data_V_we0 : STD_LOGIC;
    signal Loop_1_proc_U0_base_data_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Loop_1_proc_U0_cols_read : STD_LOGIC;
    signal Loop_1_proc_U0_rows_read : STD_LOGIC;
    signal Loop_1_proc_U0_ap_return_0 : STD_LOGIC_VECTOR (8 downto 0);
    signal Loop_1_proc_U0_ap_return_1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_channel_done_rows_cast350_loc_cha : STD_LOGIC;
    signal rows_cast350_loc_cha_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_rows_cast350_loc_cha : STD_LOGIC := '0';
    signal ap_sync_channel_write_rows_cast350_loc_cha : STD_LOGIC;
    signal ap_channel_done_cols_cast347_loc_cha : STD_LOGIC;
    signal cols_cast347_loc_cha_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_cols_cast347_loc_cha : STD_LOGIC := '0';
    signal ap_sync_channel_write_cols_cast347_loc_cha : STD_LOGIC;
    signal ap_channel_done_base_data_V : STD_LOGIC;
    signal Loop_1_proc_U0_base_data_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_base_data_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_base_data_V : STD_LOGIC;
    signal xfMat2axis_U0_ap_start : STD_LOGIC;
    signal xfMat2axis_U0_ap_done : STD_LOGIC;
    signal xfMat2axis_U0_ap_continue : STD_LOGIC;
    signal xfMat2axis_U0_ap_idle : STD_LOGIC;
    signal xfMat2axis_U0_ap_ready : STD_LOGIC;
    signal xfMat2axis_U0_p_dst_data_V_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal xfMat2axis_U0_p_dst_data_V_ce0 : STD_LOGIC;
    signal xfMat2axis_U0_dst_TDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal xfMat2axis_U0_dst_TVALID : STD_LOGIC;
    signal xfMat2axis_U0_dst_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal base_data_V_i_full_n : STD_LOGIC;
    signal base_data_V_t_empty_n : STD_LOGIC;
    signal rows_c_full_n : STD_LOGIC;
    signal rows_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rows_c_empty_n : STD_LOGIC;
    signal cols_c_full_n : STD_LOGIC;
    signal cols_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_c_empty_n : STD_LOGIC;
    signal base_size_cast345_lo_dout : STD_LOGIC_VECTOR (18 downto 0);
    signal base_size_cast345_lo_empty_n : STD_LOGIC;
    signal tmp_9_loc_channel_dout : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_9_loc_channel_empty_n : STD_LOGIC;
    signal tmp_9_cast344_loc_ch_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_cast344_loc_ch_empty_n : STD_LOGIC;
    signal cols_cast347_loc_cha_dout : STD_LOGIC_VECTOR (8 downto 0);
    signal cols_cast347_loc_cha_empty_n : STD_LOGIC;
    signal rows_cast350_loc_cha_dout : STD_LOGIC_VECTOR (8 downto 0);
    signal rows_cast350_loc_cha_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_Block_Mat_exit354_pr_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_Mat_exit354_pr_U0_ap_ready : STD_LOGIC;
    signal Block_Mat_exit354_pr_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_Loop_1_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Loop_1_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_1_proc_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal Block_Mat_exit354_pr_U0_start_full_n : STD_LOGIC;
    signal Block_Mat_exit354_pr_U0_start_write : STD_LOGIC;
    signal Loop_1_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_1_proc_U0_start_write : STD_LOGIC;
    signal xfMat2axis_U0_start_full_n : STD_LOGIC;
    signal xfMat2axis_U0_start_write : STD_LOGIC;

    component Block_Mat_exit354_pr IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (31 downto 0);
        cols : IN STD_LOGIC_VECTOR (31 downto 0);
        rows_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rows_out_full_n : IN STD_LOGIC;
        rows_out_write : OUT STD_LOGIC;
        cols_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols_out_full_n : IN STD_LOGIC;
        cols_out_write : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Loop_1_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (17 downto 0);
        src_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        src_TVALID : IN STD_LOGIC;
        src_TREADY : OUT STD_LOGIC;
        base_data_V_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        base_data_V_ce0 : OUT STD_LOGIC;
        base_data_V_we0 : OUT STD_LOGIC;
        base_data_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        base_data_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cols_empty_n : IN STD_LOGIC;
        cols_read : OUT STD_LOGIC;
        rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rows_empty_n : IN STD_LOGIC;
        rows_read : OUT STD_LOGIC;
        p_read1 : IN STD_LOGIC_VECTOR (18 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component xfMat2axis IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_dst_data_V_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        p_dst_data_V_ce0 : OUT STD_LOGIC;
        p_dst_data_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        dst_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst_TVALID : OUT STD_LOGIC;
        dst_TREADY : IN STD_LOGIC;
        dst_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        rows : IN STD_LOGIC_VECTOR (8 downto 0);
        cols : IN STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component hw_label_accel_base_data_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (17 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (17 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w19_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (18 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (18 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w18_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (17 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (17 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w9_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (8 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (8 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hw_label_accel_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        rows : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    hw_label_accel_AXILiteS_s_axi_U : component hw_label_accel_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        rows => rows,
        cols => cols);

    base_data_V_U : component hw_label_accel_base_data_V
    generic map (
        DataWidth => 16,
        AddressRange => 153600,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => Loop_1_proc_U0_base_data_V_address0,
        i_ce0 => Loop_1_proc_U0_base_data_V_ce0,
        i_we0 => Loop_1_proc_U0_base_data_V_we0,
        i_d0 => Loop_1_proc_U0_base_data_V_d0,
        i_q0 => base_data_V_i_q0,
        t_address0 => xfMat2axis_U0_p_dst_data_V_address0,
        t_ce0 => xfMat2axis_U0_p_dst_data_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv16_0,
        t_q0 => base_data_V_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => base_data_V_i_full_n,
        i_write => ap_channel_done_base_data_V,
        t_empty_n => base_data_V_t_empty_n,
        t_read => xfMat2axis_U0_ap_ready);

    Block_Mat_exit354_pr_U0 : component Block_Mat_exit354_pr
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_Mat_exit354_pr_U0_ap_start,
        ap_done => Block_Mat_exit354_pr_U0_ap_done,
        ap_continue => Block_Mat_exit354_pr_U0_ap_continue,
        ap_idle => Block_Mat_exit354_pr_U0_ap_idle,
        ap_ready => Block_Mat_exit354_pr_U0_ap_ready,
        rows => rows,
        cols => cols,
        rows_out_din => Block_Mat_exit354_pr_U0_rows_out_din,
        rows_out_full_n => rows_c_full_n,
        rows_out_write => Block_Mat_exit354_pr_U0_rows_out_write,
        cols_out_din => Block_Mat_exit354_pr_U0_cols_out_din,
        cols_out_full_n => cols_c_full_n,
        cols_out_write => Block_Mat_exit354_pr_U0_cols_out_write,
        ap_return_0 => Block_Mat_exit354_pr_U0_ap_return_0,
        ap_return_1 => Block_Mat_exit354_pr_U0_ap_return_1,
        ap_return_2 => Block_Mat_exit354_pr_U0_ap_return_2);

    Loop_1_proc_U0 : component Loop_1_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_1_proc_U0_ap_start,
        ap_done => Loop_1_proc_U0_ap_done,
        ap_continue => Loop_1_proc_U0_ap_continue,
        ap_idle => Loop_1_proc_U0_ap_idle,
        ap_ready => Loop_1_proc_U0_ap_ready,
        p_read => tmp_9_loc_channel_dout,
        src_TDATA => src_TDATA,
        src_TVALID => src_TVALID,
        src_TREADY => Loop_1_proc_U0_src_TREADY,
        base_data_V_address0 => Loop_1_proc_U0_base_data_V_address0,
        base_data_V_ce0 => Loop_1_proc_U0_base_data_V_ce0,
        base_data_V_we0 => Loop_1_proc_U0_base_data_V_we0,
        base_data_V_d0 => Loop_1_proc_U0_base_data_V_d0,
        base_data_V_q0 => base_data_V_i_q0,
        cols_dout => cols_c_dout,
        cols_empty_n => cols_c_empty_n,
        cols_read => Loop_1_proc_U0_cols_read,
        rows_dout => rows_c_dout,
        rows_empty_n => rows_c_empty_n,
        rows_read => Loop_1_proc_U0_rows_read,
        p_read1 => base_size_cast345_lo_dout,
        p_read2 => tmp_9_cast344_loc_ch_dout,
        ap_return_0 => Loop_1_proc_U0_ap_return_0,
        ap_return_1 => Loop_1_proc_U0_ap_return_1);

    xfMat2axis_U0 : component xfMat2axis
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => xfMat2axis_U0_ap_start,
        ap_done => xfMat2axis_U0_ap_done,
        ap_continue => xfMat2axis_U0_ap_continue,
        ap_idle => xfMat2axis_U0_ap_idle,
        ap_ready => xfMat2axis_U0_ap_ready,
        p_dst_data_V_address0 => xfMat2axis_U0_p_dst_data_V_address0,
        p_dst_data_V_ce0 => xfMat2axis_U0_p_dst_data_V_ce0,
        p_dst_data_V_q0 => base_data_V_t_q0,
        dst_TDATA => xfMat2axis_U0_dst_TDATA,
        dst_TVALID => xfMat2axis_U0_dst_TVALID,
        dst_TREADY => dst_TREADY,
        dst_TLAST => xfMat2axis_U0_dst_TLAST,
        rows => rows_cast350_loc_cha_dout,
        cols => cols_cast347_loc_cha_dout);

    rows_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit354_pr_U0_rows_out_din,
        if_full_n => rows_c_full_n,
        if_write => Block_Mat_exit354_pr_U0_rows_out_write,
        if_dout => rows_c_dout,
        if_empty_n => rows_c_empty_n,
        if_read => Loop_1_proc_U0_rows_read);

    cols_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit354_pr_U0_cols_out_din,
        if_full_n => cols_c_full_n,
        if_write => Block_Mat_exit354_pr_U0_cols_out_write,
        if_dout => cols_c_dout,
        if_empty_n => cols_c_empty_n,
        if_read => Loop_1_proc_U0_cols_read);

    base_size_cast345_lo_U : component fifo_w19_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit354_pr_U0_ap_return_0,
        if_full_n => base_size_cast345_lo_full_n,
        if_write => ap_channel_done_base_size_cast345_lo,
        if_dout => base_size_cast345_lo_dout,
        if_empty_n => base_size_cast345_lo_empty_n,
        if_read => Loop_1_proc_U0_ap_ready);

    tmp_9_loc_channel_U : component fifo_w18_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit354_pr_U0_ap_return_1,
        if_full_n => tmp_9_loc_channel_full_n,
        if_write => ap_channel_done_tmp_9_loc_channel,
        if_dout => tmp_9_loc_channel_dout,
        if_empty_n => tmp_9_loc_channel_empty_n,
        if_read => Loop_1_proc_U0_ap_ready);

    tmp_9_cast344_loc_ch_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit354_pr_U0_ap_return_2,
        if_full_n => tmp_9_cast344_loc_ch_full_n,
        if_write => ap_channel_done_tmp_9_cast344_loc_ch,
        if_dout => tmp_9_cast344_loc_ch_dout,
        if_empty_n => tmp_9_cast344_loc_ch_empty_n,
        if_read => Loop_1_proc_U0_ap_ready);

    cols_cast347_loc_cha_U : component fifo_w9_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_1_proc_U0_ap_return_0,
        if_full_n => cols_cast347_loc_cha_full_n,
        if_write => ap_channel_done_cols_cast347_loc_cha,
        if_dout => cols_cast347_loc_cha_dout,
        if_empty_n => cols_cast347_loc_cha_empty_n,
        if_read => xfMat2axis_U0_ap_ready);

    rows_cast350_loc_cha_U : component fifo_w9_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_1_proc_U0_ap_return_1,
        if_full_n => rows_cast350_loc_cha_full_n,
        if_write => ap_channel_done_rows_cast350_loc_cha,
        if_dout => rows_cast350_loc_cha_dout,
        if_empty_n => rows_cast350_loc_cha_empty_n,
        if_read => xfMat2axis_U0_ap_ready);





    ap_sync_reg_Block_Mat_exit354_pr_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Block_Mat_exit354_pr_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Block_Mat_exit354_pr_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_Mat_exit354_pr_U0_ap_ready <= ap_sync_Block_Mat_exit354_pr_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Loop_1_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Loop_1_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Loop_1_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Loop_1_proc_U0_ap_ready <= ap_sync_Loop_1_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_base_data_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_base_data_V <= ap_const_logic_0;
            else
                if (((Loop_1_proc_U0_ap_done and Loop_1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_base_data_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_base_data_V <= ap_sync_channel_write_base_data_V;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_base_size_cast345_lo_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_base_size_cast345_lo <= ap_const_logic_0;
            else
                if (((Block_Mat_exit354_pr_U0_ap_done and Block_Mat_exit354_pr_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_base_size_cast345_lo <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_base_size_cast345_lo <= ap_sync_channel_write_base_size_cast345_lo;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_cols_cast347_loc_cha_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_cols_cast347_loc_cha <= ap_const_logic_0;
            else
                if (((Loop_1_proc_U0_ap_done and Loop_1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_cols_cast347_loc_cha <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_cols_cast347_loc_cha <= ap_sync_channel_write_cols_cast347_loc_cha;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_rows_cast350_loc_cha_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_rows_cast350_loc_cha <= ap_const_logic_0;
            else
                if (((Loop_1_proc_U0_ap_done and Loop_1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_rows_cast350_loc_cha <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_rows_cast350_loc_cha <= ap_sync_channel_write_rows_cast350_loc_cha;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_tmp_9_cast344_loc_ch_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_tmp_9_cast344_loc_ch <= ap_const_logic_0;
            else
                if (((Block_Mat_exit354_pr_U0_ap_done and Block_Mat_exit354_pr_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_tmp_9_cast344_loc_ch <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_tmp_9_cast344_loc_ch <= ap_sync_channel_write_tmp_9_cast344_loc_ch;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_tmp_9_loc_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_tmp_9_loc_channel <= ap_const_logic_0;
            else
                if (((Block_Mat_exit354_pr_U0_ap_done and Block_Mat_exit354_pr_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_tmp_9_loc_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_tmp_9_loc_channel <= ap_sync_channel_write_tmp_9_loc_channel;
                end if; 
            end if;
        end if;
    end process;


    Block_Mat_exit354_pr_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = Block_Mat_exit354_pr_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                Block_Mat_exit354_pr_U0_ap_ready_count <= std_logic_vector(unsigned(Block_Mat_exit354_pr_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Block_Mat_exit354_pr_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Block_Mat_exit354_pr_U0_ap_ready_count <= std_logic_vector(unsigned(Block_Mat_exit354_pr_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    Loop_1_proc_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = Loop_1_proc_U0_ap_ready))) then 
                Loop_1_proc_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_1_proc_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Loop_1_proc_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Loop_1_proc_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_1_proc_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    Block_Mat_exit354_pr_U0_ap_continue <= (ap_sync_channel_write_tmp_9_loc_channel and ap_sync_channel_write_tmp_9_cast344_loc_ch and ap_sync_channel_write_base_size_cast345_lo);
    Block_Mat_exit354_pr_U0_ap_start <= ((ap_sync_reg_Block_Mat_exit354_pr_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Block_Mat_exit354_pr_U0_start_full_n <= ap_const_logic_1;
    Block_Mat_exit354_pr_U0_start_write <= ap_const_logic_0;
    Loop_1_proc_U0_ap_continue <= (ap_sync_channel_write_rows_cast350_loc_cha and ap_sync_channel_write_cols_cast347_loc_cha and ap_sync_channel_write_base_data_V);
    Loop_1_proc_U0_ap_start <= (tmp_9_loc_channel_empty_n and tmp_9_cast344_loc_ch_empty_n and (ap_sync_reg_Loop_1_proc_U0_ap_ready xor ap_const_logic_1) and base_size_cast345_lo_empty_n and ap_start);
    Loop_1_proc_U0_base_data_V_full_n <= base_data_V_i_full_n;
    Loop_1_proc_U0_start_full_n <= ap_const_logic_1;
    Loop_1_proc_U0_start_write <= ap_const_logic_0;
    ap_channel_done_base_data_V <= ((ap_sync_reg_channel_write_base_data_V xor ap_const_logic_1) and Loop_1_proc_U0_ap_done);
    ap_channel_done_base_size_cast345_lo <= ((ap_sync_reg_channel_write_base_size_cast345_lo xor ap_const_logic_1) and Block_Mat_exit354_pr_U0_ap_done);
    ap_channel_done_cols_cast347_loc_cha <= ((ap_sync_reg_channel_write_cols_cast347_loc_cha xor ap_const_logic_1) and Loop_1_proc_U0_ap_done);
    ap_channel_done_rows_cast350_loc_cha <= ((ap_sync_reg_channel_write_rows_cast350_loc_cha xor ap_const_logic_1) and Loop_1_proc_U0_ap_done);
    ap_channel_done_tmp_9_cast344_loc_ch <= ((ap_sync_reg_channel_write_tmp_9_cast344_loc_ch xor ap_const_logic_1) and Block_Mat_exit354_pr_U0_ap_done);
    ap_channel_done_tmp_9_loc_channel <= ((ap_sync_reg_channel_write_tmp_9_loc_channel xor ap_const_logic_1) and Block_Mat_exit354_pr_U0_ap_done);
    ap_done <= xfMat2axis_U0_ap_done;
    ap_idle <= (xfMat2axis_U0_ap_idle and (rows_cast350_loc_cha_empty_n xor ap_const_logic_1) and (cols_cast347_loc_cha_empty_n xor ap_const_logic_1) and (tmp_9_cast344_loc_ch_empty_n xor ap_const_logic_1) and (tmp_9_loc_channel_empty_n xor ap_const_logic_1) and (base_size_cast345_lo_empty_n xor ap_const_logic_1) and (base_data_V_t_empty_n xor ap_const_logic_1) and Loop_1_proc_U0_ap_idle and Block_Mat_exit354_pr_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_Block_Mat_exit354_pr_U0_ap_ready <= (ap_sync_reg_Block_Mat_exit354_pr_U0_ap_ready or Block_Mat_exit354_pr_U0_ap_ready);
    ap_sync_Loop_1_proc_U0_ap_ready <= (ap_sync_reg_Loop_1_proc_U0_ap_ready or Loop_1_proc_U0_ap_ready);
    ap_sync_channel_write_base_data_V <= ((ap_channel_done_base_data_V and Loop_1_proc_U0_base_data_V_full_n) or ap_sync_reg_channel_write_base_data_V);
    ap_sync_channel_write_base_size_cast345_lo <= ((base_size_cast345_lo_full_n and ap_channel_done_base_size_cast345_lo) or ap_sync_reg_channel_write_base_size_cast345_lo);
    ap_sync_channel_write_cols_cast347_loc_cha <= ((cols_cast347_loc_cha_full_n and ap_channel_done_cols_cast347_loc_cha) or ap_sync_reg_channel_write_cols_cast347_loc_cha);
    ap_sync_channel_write_rows_cast350_loc_cha <= ((rows_cast350_loc_cha_full_n and ap_channel_done_rows_cast350_loc_cha) or ap_sync_reg_channel_write_rows_cast350_loc_cha);
    ap_sync_channel_write_tmp_9_cast344_loc_ch <= ((tmp_9_cast344_loc_ch_full_n and ap_channel_done_tmp_9_cast344_loc_ch) or ap_sync_reg_channel_write_tmp_9_cast344_loc_ch);
    ap_sync_channel_write_tmp_9_loc_channel <= ((tmp_9_loc_channel_full_n and ap_channel_done_tmp_9_loc_channel) or ap_sync_reg_channel_write_tmp_9_loc_channel);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= xfMat2axis_U0_ap_done;
    ap_sync_ready <= (ap_sync_Loop_1_proc_U0_ap_ready and ap_sync_Block_Mat_exit354_pr_U0_ap_ready);
    dst_TDATA <= xfMat2axis_U0_dst_TDATA;
    dst_TLAST <= xfMat2axis_U0_dst_TLAST;
    dst_TVALID <= xfMat2axis_U0_dst_TVALID;
    src_TREADY <= Loop_1_proc_U0_src_TREADY;
    xfMat2axis_U0_ap_continue <= ap_const_logic_1;
    xfMat2axis_U0_ap_start <= (rows_cast350_loc_cha_empty_n and cols_cast347_loc_cha_empty_n and base_data_V_t_empty_n);
    xfMat2axis_U0_start_full_n <= ap_const_logic_1;
    xfMat2axis_U0_start_write <= ap_const_logic_0;
end behav;
