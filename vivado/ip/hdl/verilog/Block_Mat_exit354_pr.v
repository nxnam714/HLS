// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Block_Mat_exit354_pr (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        rows,
        cols,
        rows_out_din,
        rows_out_full_n,
        rows_out_write,
        cols_out_din,
        cols_out_full_n,
        cols_out_write,
        ap_return_0,
        ap_return_1,
        ap_return_2
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] rows;
input  [31:0] cols;
output  [31:0] rows_out_din;
input   rows_out_full_n;
output   rows_out_write;
output  [31:0] cols_out_din;
input   cols_out_full_n;
output   cols_out_write;
output  [18:0] ap_return_0;
output  [17:0] ap_return_1;
output  [31:0] ap_return_2;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg rows_out_write;
reg cols_out_write;
reg[18:0] ap_return_0;
reg[17:0] ap_return_1;
reg[31:0] ap_return_2;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    rows_out_blk_n;
reg    cols_out_blk_n;
reg    ap_block_state1;
wire  signed [31:0] base_size_fu_58_p0;
wire  signed [31:0] base_size_fu_58_p1;
wire   [31:0] base_size_fu_58_p2;
wire   [17:0] tmp_fu_64_p1;
wire   [17:0] tmp_9_out_fu_72_p2;
wire   [18:0] tmp_19_fu_68_p1;
wire   [31:0] tmp_9_cast344_out_fu_78_p1;
reg   [18:0] ap_return_0_preg;
reg   [17:0] ap_return_1_preg;
reg   [31:0] ap_return_2_preg;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_return_0_preg = 19'd0;
#0 ap_return_1_preg = 18'd0;
#0 ap_return_2_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (cols_out_full_n == 1'b0) | (rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 19'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (cols_out_full_n == 1'b0) | (rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_0_preg <= tmp_19_fu_68_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 18'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (cols_out_full_n == 1'b0) | (rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_1_preg <= tmp_9_out_fu_72_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_2_preg[0] <= 1'b0;
        ap_return_2_preg[1] <= 1'b0;
        ap_return_2_preg[2] <= 1'b0;
        ap_return_2_preg[3] <= 1'b0;
        ap_return_2_preg[4] <= 1'b0;
        ap_return_2_preg[5] <= 1'b0;
        ap_return_2_preg[6] <= 1'b0;
        ap_return_2_preg[7] <= 1'b0;
        ap_return_2_preg[8] <= 1'b0;
        ap_return_2_preg[9] <= 1'b0;
        ap_return_2_preg[10] <= 1'b0;
        ap_return_2_preg[11] <= 1'b0;
        ap_return_2_preg[12] <= 1'b0;
        ap_return_2_preg[13] <= 1'b0;
        ap_return_2_preg[14] <= 1'b0;
        ap_return_2_preg[15] <= 1'b0;
        ap_return_2_preg[16] <= 1'b0;
        ap_return_2_preg[17] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (cols_out_full_n == 1'b0) | (rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_2_preg[17 : 0] <= tmp_9_cast344_out_fu_78_p1[17 : 0];
        end
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (cols_out_full_n == 1'b0) | (rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (cols_out_full_n == 1'b0) | (rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (cols_out_full_n == 1'b0) | (rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_0 = tmp_19_fu_68_p1;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (cols_out_full_n == 1'b0) | (rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_1 = tmp_9_out_fu_72_p2;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (cols_out_full_n == 1'b0) | (rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_2 = tmp_9_cast344_out_fu_78_p1;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_out_blk_n = cols_out_full_n;
    end else begin
        cols_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (cols_out_full_n == 1'b0) | (rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_out_write = 1'b1;
    end else begin
        cols_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_out_blk_n = rows_out_full_n;
    end else begin
        rows_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (cols_out_full_n == 1'b0) | (rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_out_write = 1'b1;
    end else begin
        rows_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (cols_out_full_n == 1'b0) | (rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign base_size_fu_58_p0 = cols;

assign base_size_fu_58_p1 = rows;

assign base_size_fu_58_p2 = ($signed(base_size_fu_58_p0) * $signed(base_size_fu_58_p1));

assign cols_out_din = cols;

assign rows_out_din = rows;

assign tmp_19_fu_68_p1 = base_size_fu_58_p2[18:0];

assign tmp_9_cast344_out_fu_78_p1 = tmp_9_out_fu_72_p2;

assign tmp_9_out_fu_72_p2 = ($signed(18'd262143) + $signed(tmp_fu_64_p1));

assign tmp_fu_64_p1 = base_size_fu_58_p2[17:0];

always @ (posedge ap_clk) begin
    ap_return_2_preg[31:18] <= 14'b00000000000000;
end

endmodule //Block_Mat_exit354_pr
