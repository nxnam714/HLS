// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module push (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        data_x_address0,
        data_x_ce0,
        data_x_we0,
        data_x_d0,
        data_y_address0,
        data_y_ce0,
        data_y_we0,
        data_y_d0,
        rear_read,
        cap_read,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 36'd1;
parameter    ap_ST_fsm_state2 = 36'd2;
parameter    ap_ST_fsm_state3 = 36'd4;
parameter    ap_ST_fsm_state4 = 36'd8;
parameter    ap_ST_fsm_state5 = 36'd16;
parameter    ap_ST_fsm_state6 = 36'd32;
parameter    ap_ST_fsm_state7 = 36'd64;
parameter    ap_ST_fsm_state8 = 36'd128;
parameter    ap_ST_fsm_state9 = 36'd256;
parameter    ap_ST_fsm_state10 = 36'd512;
parameter    ap_ST_fsm_state11 = 36'd1024;
parameter    ap_ST_fsm_state12 = 36'd2048;
parameter    ap_ST_fsm_state13 = 36'd4096;
parameter    ap_ST_fsm_state14 = 36'd8192;
parameter    ap_ST_fsm_state15 = 36'd16384;
parameter    ap_ST_fsm_state16 = 36'd32768;
parameter    ap_ST_fsm_state17 = 36'd65536;
parameter    ap_ST_fsm_state18 = 36'd131072;
parameter    ap_ST_fsm_state19 = 36'd262144;
parameter    ap_ST_fsm_state20 = 36'd524288;
parameter    ap_ST_fsm_state21 = 36'd1048576;
parameter    ap_ST_fsm_state22 = 36'd2097152;
parameter    ap_ST_fsm_state23 = 36'd4194304;
parameter    ap_ST_fsm_state24 = 36'd8388608;
parameter    ap_ST_fsm_state25 = 36'd16777216;
parameter    ap_ST_fsm_state26 = 36'd33554432;
parameter    ap_ST_fsm_state27 = 36'd67108864;
parameter    ap_ST_fsm_state28 = 36'd134217728;
parameter    ap_ST_fsm_state29 = 36'd268435456;
parameter    ap_ST_fsm_state30 = 36'd536870912;
parameter    ap_ST_fsm_state31 = 36'd1073741824;
parameter    ap_ST_fsm_state32 = 36'd2147483648;
parameter    ap_ST_fsm_state33 = 36'd4294967296;
parameter    ap_ST_fsm_state34 = 36'd8589934592;
parameter    ap_ST_fsm_state35 = 36'd17179869184;
parameter    ap_ST_fsm_state36 = 36'd34359738368;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] p_read;
input  [31:0] p_read1;
output  [11:0] data_x_address0;
output   data_x_ce0;
output   data_x_we0;
output  [31:0] data_x_d0;
output  [11:0] data_y_address0;
output   data_y_ce0;
output   data_y_we0;
output  [31:0] data_y_d0;
input  [31:0] rear_read;
input  [31:0] cap_read;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_x_ce0;
reg data_x_we0;
reg data_y_ce0;
reg data_y_we0;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;

(* fsm_encoding = "none" *) reg   [35:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_fu_92_p2;
reg   [0:0] tmp_reg_146;
reg   [31:0] ap_phi_mux_rear_phi_fu_77_p4;
reg   [31:0] rear_reg_74;
wire   [31:0] grp_fu_110_p2;
wire    ap_CS_fsm_state36;
reg   [31:0] ap_phi_mux_cap_phi_fu_86_p4;
reg   [31:0] cap_reg_83;
wire   [31:0] tmp_3_fu_117_p2;
wire  signed [63:0] tmp_s_fu_98_p1;
wire  signed [31:0] tmp_s_fu_98_p0;
wire  signed [31:0] tmp_1_fu_104_p0;
wire   [31:0] grp_fu_110_p0;
wire   [12:0] grp_fu_110_p1;
reg    grp_fu_110_ap_start;
wire    grp_fu_110_ap_done;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [35:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 36'd1;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
end

hw_label_accel_srem_32ns_13ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 32 ))
hw_label_accel_srem_32ns_13ns_32_36_seq_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_110_ap_start),
    .done(grp_fu_110_ap_done),
    .din0(grp_fu_110_p0),
    .din1(grp_fu_110_p1),
    .ce(1'b1),
    .dout(grp_fu_110_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state36)) begin
            ap_return_0_preg <= ap_phi_mux_rear_phi_fu_77_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state36)) begin
            ap_return_1_preg <= ap_phi_mux_cap_phi_fu_86_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_146 == 1'd0) & (1'b1 == ap_CS_fsm_state36))) begin
        cap_reg_83 <= tmp_3_fu_117_p2;
    end else if (((tmp_fu_92_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cap_reg_83 <= cap_read;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_146 == 1'd0) & (1'b1 == ap_CS_fsm_state36))) begin
        rear_reg_74 <= grp_fu_110_p2;
    end else if (((tmp_fu_92_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rear_reg_74 <= rear_read;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_reg_146 <= tmp_fu_92_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_146 == 1'd0) & (1'b1 == ap_CS_fsm_state36))) begin
        ap_phi_mux_cap_phi_fu_86_p4 = tmp_3_fu_117_p2;
    end else begin
        ap_phi_mux_cap_phi_fu_86_p4 = cap_reg_83;
    end
end

always @ (*) begin
    if (((tmp_reg_146 == 1'd0) & (1'b1 == ap_CS_fsm_state36))) begin
        ap_phi_mux_rear_phi_fu_77_p4 = grp_fu_110_p2;
    end else begin
        ap_phi_mux_rear_phi_fu_77_p4 = rear_reg_74;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        ap_return_0 = ap_phi_mux_rear_phi_fu_77_p4;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        ap_return_1 = ap_phi_mux_cap_phi_fu_86_p4;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        data_x_ce0 = 1'b1;
    end else begin
        data_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_92_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        data_x_we0 = 1'b1;
    end else begin
        data_x_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        data_y_ce0 = 1'b1;
    end else begin
        data_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_92_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        data_y_we0 = 1'b1;
    end else begin
        data_y_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_92_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_110_ap_start = 1'b1;
    end else begin
        grp_fu_110_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((tmp_fu_92_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else if (((tmp_fu_92_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign data_x_address0 = tmp_s_fu_98_p1;

assign data_x_d0 = p_read;

assign data_y_address0 = tmp_s_fu_98_p1;

assign data_y_d0 = p_read1;

assign grp_fu_110_p0 = ($signed(tmp_1_fu_104_p0) + $signed(32'd1));

assign grp_fu_110_p1 = 32'd3200;

assign tmp_1_fu_104_p0 = rear_read;

assign tmp_3_fu_117_p2 = (cap_read + 32'd1);

assign tmp_fu_92_p2 = ((cap_read == 32'd3200) ? 1'b1 : 1'b0);

assign tmp_s_fu_98_p0 = rear_read;

assign tmp_s_fu_98_p1 = tmp_s_fu_98_p0;

endmodule //push
